import React from 'react';\nimport '../styles/responsive.css';\nimport '../styles/responsive-components.css';\nimport '../styles/mobile-optimizations.css';\n\ninterface ResponsiveLayoutProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function ResponsiveLayout({ children, className = '' }: ResponsiveLayoutProps) {\n  return (\n    <div className={`responsive-layout ${className}`}>\n      {children}\n    </div>\n  );\n}\n\ninterface ResponsiveContainerProps {\n  children: React.ReactNode;\n  size?: 'sm' | 'md' | 'lg' | 'xl' | 'fluid';\n  className?: string;\n}\n\nexport function ResponsiveContainer({ \n  children, \n  size = 'lg', \n  className = '' \n}: ResponsiveContainerProps) {\n  const containerClass = `container-${size} ${className}`;\n  \n  return (\n    <div className={containerClass}>\n      {children}\n    </div>\n  );\n}\n\ninterface ResponsiveGridProps {\n  children: React.ReactNode;\n  cols?: 1 | 2 | 3 | 4;\n  gap?: 'sm' | 'md' | 'lg';\n  className?: string;\n}\n\nexport function ResponsiveGrid({ \n  children, \n  cols = 1, \n  gap = 'md', \n  className = '' \n}: ResponsiveGridProps) {\n  const gridClass = `grid-responsive grid-${cols} gap-${gap === 'sm' ? '2' : gap === 'md' ? '4' : '6'} ${className}`;\n  \n  return (\n    <div className={gridClass}>\n      {children}\n    </div>\n  );\n}\n\ninterface ResponsiveCardProps {\n  children: React.ReactNode;\n  padding?: 'sm' | 'md' | 'lg';\n  className?: string;\n}\n\nexport function ResponsiveCard({ \n  children, \n  padding = 'md', \n  className = '' \n}: ResponsiveCardProps) {\n  const cardClass = `card-responsive spacing-responsive-${padding} ${className}`;\n  \n  return (\n    <div className={cardClass}>\n      {children}\n    </div>\n  );\n}\n\ninterface ResponsiveTextProps {\n  children: React.ReactNode;\n  size?: 'xs' | 'sm' | 'base' | 'lg' | 'xl' | '2xl' | '3xl';\n  className?: string;\n  as?: 'p' | 'span' | 'div' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n}\n\nexport function ResponsiveText({ \n  children, \n  size = 'base', \n  className = '', \n  as: Component = 'p' \n}: ResponsiveTextProps) {\n  const textClass = `text-responsive-${size} ${className}`;\n  \n  return (\n    <Component className={textClass}>\n      {children}\n    </Component>\n  );\n}\n\ninterface ResponsiveButtonProps {\n  children: React.ReactNode;\n  variant?: 'primary' | 'secondary';\n  size?: 'sm' | 'md' | 'lg';\n  fullWidth?: boolean;\n  className?: string;\n  onClick?: () => void;\n  disabled?: boolean;\n  type?: 'button' | 'submit' | 'reset';\n}\n\nexport function ResponsiveButton({ \n  children, \n  variant = 'primary', \n  size = 'md', \n  fullWidth = false,\n  className = '',\n  onClick,\n  disabled = false,\n  type = 'button'\n}: ResponsiveButtonProps) {\n  const buttonClass = `btn btn-${variant} ${fullWidth ? 'w-full' : ''} ${className}`;\n  \n  return (\n    <button \n      className={buttonClass}\n      onClick={onClick}\n      disabled={disabled}\n      type={type}\n    >\n      {children}\n    </button>\n  );\n}\n\ninterface ResponsiveInputProps {\n  placeholder?: string;\n  value?: string;\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  type?: 'text' | 'email' | 'password' | 'search';\n  className?: string;\n  disabled?: boolean;\n  required?: boolean;\n}\n\nexport function ResponsiveInput({ \n  placeholder,\n  value,\n  onChange,\n  type = 'text',\n  className = '',\n  disabled = false,\n  required = false\n}: ResponsiveInputProps) {\n  const inputClass = `form-input-responsive ${className}`;\n  \n  return (\n    <input \n      className={inputClass}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      type={type}\n      disabled={disabled}\n      required={required}\n    />\n  );\n}\n\ninterface ResponsiveModalProps {\n  children: React.ReactNode;\n  isOpen: boolean;\n  onClose: () => void;\n  className?: string;\n}\n\nexport function ResponsiveModal({ \n  children, \n  isOpen, \n  onClose, \n  className = '' \n}: ResponsiveModalProps) {\n  if (!isOpen) return null;\n  \n  return (\n    <div className=\"modal-responsive\" onClick={onClose}>\n      <div \n        className={`modal-content-responsive ${className}`}\n        onClick={(e) => e.stopPropagation()}\n      >\n        <button \n          className=\"absolute top-4 right-4 text-2xl\" \n          onClick={onClose}\n          aria-label=\"Close modal\"\n        >\n          Ã—\n        </button>\n        {children}\n      </div>\n    </div>\n  );\n}\n\n// Hook for responsive breakpoints\nexport function useResponsive() {\n  const [breakpoint, setBreakpoint] = React.useState<'mobile' | 'tablet' | 'desktop'>('desktop');\n  \n  React.useEffect(() => {\n    const checkBreakpoint = () => {\n      if (window.innerWidth <= 480) {\n        setBreakpoint('mobile');\n      } else if (window.innerWidth <= 768) {\n        setBreakpoint('tablet');\n      } else {\n        setBreakpoint('desktop');\n      }\n    };\n    \n    checkBreakpoint();\n    window.addEventListener('resize', checkBreakpoint);\n    \n    return () => window.removeEventListener('resize', checkBreakpoint);\n  }, []);\n  \n  return {\n    breakpoint,\n    isMobile: breakpoint === 'mobile',\n    isTablet: breakpoint === 'tablet',\n    isDesktop: breakpoint === 'desktop'\n  };\n}\n\n// Utility component for conditional rendering based on screen size\ninterface ShowOnProps {\n  children: React.ReactNode;\n  breakpoint: 'mobile' | 'tablet' | 'desktop';\n}\n\nexport function ShowOn({ children, breakpoint }: ShowOnProps) {\n  const { breakpoint: currentBreakpoint } = useResponsive();\n  \n  if (currentBreakpoint !== breakpoint) {\n    return null;\n  }\n  \n  return <>{children}</>;\n}\n\n// Utility component for hiding on specific screen sizes\ninterface HideOnProps {\n  children: React.ReactNode;\n  breakpoint: 'mobile' | 'tablet' | 'desktop';\n}\n\nexport function HideOn({ children, breakpoint }: HideOnProps) {\n  const { breakpoint: currentBreakpoint } = useResponsive();\n  \n  if (currentBreakpoint === breakpoint) {\n    return null;\n  }\n  \n  return <>{children}</>;\n}